{
  "language": "Solidity",
  "sources": {
    "contracts/CaseRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\n// import \"hardhat/console.sol\";\n\ncontract CaseRegistry {\n    address public owner = msg.sender;\n    uint256 currentId = 0;\n    struct Case {\n        uint256 id;\n        string companyName;\n        string caseType;\n        string description;\n        string region;\n        string profession;\n        string gender;\n        string ageRange;\n        string experience;\n    }\n    mapping(uint256 => Case) public casesById;\n    event CaseReported(\n        uint256 id,\n        string companyName,\n        string _caseType,\n        string _description,\n        string _region,\n        string _profession,\n        string _gender,\n        string _ageRange,\n        string _experience\n    );\n\n    function report(\n        string memory _companyName,\n        string memory _caseType,\n        string memory _description,\n        string memory _region,\n        string memory _profession,\n        string memory _gender,\n        string memory _ageRange,\n        string memory _experience\n    ) public {\n        casesById[currentId] = Case({\n            id: currentId,\n            companyName: _companyName,\n            caseType: _caseType,\n            description: _description,\n            region: _region,\n            profession: _profession,\n            gender: _gender,\n            ageRange: _ageRange,\n            experience: _experience\n        });\n\n        emit CaseReported(\n            casesById[currentId].id,\n            casesById[currentId].companyName,\n            casesById[currentId].caseType,\n            casesById[currentId].description,\n            casesById[currentId].region,\n            casesById[currentId].profession,\n            casesById[currentId].gender,\n            casesById[currentId].ageRange,\n            casesById[currentId].experience\n        );\n\n        currentId++;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}